# declare our custom scalars
scalar GraphQLDateTime

# **CommandEvent** the base interface for all command events.
interface CommandEvent {
    # The command event id
    id: ID!
    # The timestamp of this command event
    created: GraphQLDateTime!
}

# **OrderCommandEvent** is the base interface for all order command events.
interface OrderCommandEvent {
    # The order event id
    orderId: ID!
}

# "Command Events" ... strictly recordings of actions that have occurred.
# Verbs in the past tense.

# **OrderPlaced**: the command event that signifies the beginning of an order.
type OrderPlaced implements OrderCommandEvent & CommandEvent {
    # The command event id
    id: ID!
    # The order event id
    orderId: ID!
    # The customer id who placed the order
    customerId: String!
    # The item the customer ordered
    item: String!
    # The timestamp of this command event
    created: GraphQLDateTime!
}

# Traditional Domain Objects (nouns)

# The order domain object
type Order {
    # The unique id of the order event that resulted in this order
    id: ID!
    # The unique id of the order
    orderId: ID!
    # The customer id for the order
    customerId: String!
    # The item that was ordered
    item: String!
    # The state of the order
    state: String!
    # The create datetime of the order
    created: GraphQLDateTime!
    # The updated datetime of the order
    updated: GraphQLDateTime!
}

# TODO: Need to add pagination support for the order arrays

type Query {
    # Query to retrieve all orders
    orders: [Order!]!
}

type Mutation {
    # Action for placing an order. An **OrderPlaced** command event is returned.
    placeOrder(
    # the customerId placing this order
    customerId: String!,
    # the item that is being placed for this order
    item: String!) : OrderPlaced!
}
